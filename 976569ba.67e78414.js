(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{109:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(7),a=(n(0),n(138)),i={title:"Return a file in ASP.NET Core from a Web API",author:"Khaled Hikmat",author_title:"Software Engineer",author_url:"https://github.com/khaledhikmat",author_image_url:"https://avatars1.githubusercontent.com/u/3119726?s=400&u=090899e7b366dd702f9d0d5e483f20089010b25c&v=4",tags:["ASP.NET"]},s={permalink:"/blog/2016/09/09/aspnet-core-file-return",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/blog/2016-09-09-aspnet-core-file-return.md",source:"@site/blog/2016-09-09-aspnet-core-file-return.md",description:"In ASP .NET 4.x, I had this code to return a file from an ASP.NET Web API. This worked well and allowed a client-side JavaScript client to download the file with a progress indicator:",date:"2016-09-09T00:00:00.000Z",tags:[{label:"ASP.NET",permalink:"/blog/tags/asp-net"}],title:"Return a file in ASP.NET Core from a Web API",readingTime:1.75,truncated:!1,prevItem:{title:"Xamarin Forms App using VS for mac",permalink:"/blog/2016/11/24/presentation-evaluation"},nextItem:{title:"Kicking PowerApps Tires",permalink:"/blog/2016/04/30/kicking-powerapps-tires"}},l=[],c={toc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"In ASP .NET 4.x, I had this code to return a file from an ASP.NET Web API. This worked well and allowed a client-side JavaScript client to download the file with a progress indicator:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),'[Route("api/some/file", Name = "SomeFile")]\npublic async Task<HttpResponseMessage> GetFile()\n{\n    var error = "";\n\n    try\n    {\n        //TODO: Get the file in a string called contentData\n\n        MemoryStream stream = new MemoryStream();\n        StreamWriter writer = new StreamWriter(stream);\n        writer.Write(contentData);\n        writer.Flush();\n        stream.Position = 0;\n\n        var result = new HttpResponseMessage(HttpStatusCode.OK)\n        {\n            Content = new StreamContent(stream)\n        };\n        result.Content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");\n        result.Content.Headers.ContentLength = stream.Length;\n        result.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment")\n        {\n            FileName = "content.json",\n            Size = stream.Length\n        };\n\n        return result;\n    }\n    catch (Exception e)\n    {\n        // The tag = ControllerName.RouteName\n        error = e.Message;\n        // TODO: do something with the error\n        return new HttpResponseMessage(HttpStatusCode.BadRequest);\n    }\n}\n\n')),Object(a.b)("p",null,"Recently I created a new ASP.NET Core project for some other purpose which also had a requirement to download a file from a Web API. So naturally I copied the same code over. But that did not work...I end up getting the result in JSON....it looks something like this:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "version": {\n        "major": 1,\n        "minor": 1,\n        "build": - 1,\n        "revision": - 1,\n        "majorRevision": - 1,\n        "minorRevision": - 1\n    },\n    "content": {\n        "headers": [{\n            "key": "Content-Type",\n            "value": ["application/octet-stream"]\n        }, {\n            "key": "Content-Length",\n            "value": ["2346262"]\n        }, {\n            "key": "Content-Disposition",\n            "value": ["attachment; filename=content.json; size=2346262"]\n        }\n        ]\n    },\n    "statusCode": 200,\n    "reasonPhrase": "OK",\n    "headers": [],\n    "requestMessage": null,\n    "isSuccessStatusCode": true\n}\n')),Object(a.b)("p",null,"After several attempts, I eventually I found out that this below code works well in ASP.NET Core and my JavaScript is able to show a download progress bar:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),'[Route("api/some/file", Name = "SomeFile")]\npublic async Task<HttpResponseMessage> GetFile()\n{\n    var error = "";\n\n    try\n    {\n        //TODO: Get the file in a string called contentData\n\n        HttpContext.Response.ContentType = "application/json";\n        HttpContext.Response.ContentLength = Encoding.ASCII.GetBytes(contentData).Length;\n        HttpContext.Response.Headers["Content-Disposition"] = new ContentDispositionHeaderValue("attachment")\n        {\n            FileName = "content.json",\n            Size = HttpContext.Response.ContentLength\n        }.ToString();\n        HttpContext.Response.Headers["Content-Length"] = "" + HttpContext.Response.ContentLength;\n    \n        FileContentResult result = new FileContentResult(Encoding.ASCII.GetBytes(contentData), "application/octet-stream")\n        {\n            FileDownloadName = "content.json"\n        };\n    \n        return result;\n    }\n    catch (Exception e)\n    {\n        // TODO: Handle error\n        HttpContext.Response.StatusCode = 400;\n        ...\n    }\n}\n')),Object(a.b)("p",null,"I hope this tip helps someone!"))}p.isMDXComponent=!0},138:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,b=u["".concat(i,".").concat(d)]||u[d]||m[d]||a;return n?o.a.createElement(b,s(s({ref:t},c),{},{components:n})):o.a.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);