(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{138:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),u=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,d=p["".concat(o,".").concat(b)]||p[b]||m[b]||r;return n?i.a.createElement(d,l(l({ref:t},c),{},{components:n})):i.a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(3),i=n(7),r=(n(0),n(138)),o={title:"Xamarin Forms App using VS for mac",author:"Khaled Hikmat",author_title:"Software Engineer",author_url:"https://github.com/khaledhikmat",author_image_url:"https://avatars1.githubusercontent.com/u/3119726?s=400&u=090899e7b366dd702f9d0d5e483f20089010b25c&v=4",tags:["Xamarin"]},l={permalink:"/blog/2016/11/24/presentation-evaluation",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/blog/2016-11-24-presentation-evaluation.md",source:"@site/blog/2016-11-24-presentation-evaluation.md",description:"I am new to Xamarin development and I also wanted to try the newly announced VS for mac! So I created a little Camera app that can be used to evaluate presentations. The app allows the user to take a selfie. When committed, the picture is sent to an Azure cognitive function to extract the gender, male and smile (a measure of emotion). The app then displays the taken picture and returned result in the app. It also sends the result to PowerBI real-time stream to allow the visualization of the evaluation results.",date:"2016-11-24T00:00:00.000Z",tags:[{label:"Xamarin",permalink:"/blog/tags/xamarin"}],title:"Xamarin Forms App using VS for mac",readingTime:5.36,truncated:!1,prevItem:{title:"Service Fabric Basics",permalink:"/blog/2016/12/02/service-fabric-basics"},nextItem:{title:"Return a file in ASP.NET Core from a Web API",permalink:"/blog/2016/09/09/aspnet-core-file-return"}},s=[{value:"Xamarin App",id:"xamarin-app",children:[{value:"Taking a Camera picture",id:"taking-a-camera-picture",children:[]},{value:"Communicating with Cognitive",id:"communicating-with-cognitive",children:[]},{value:"PowerBI",id:"powerbi",children:[]}]}],c={toc:s};function u(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"I am new to Xamarin development and I also wanted to try the newly announced VS for mac! So I created a little Camera app that can be used to evaluate presentations. The app allows the user to take a ",Object(r.b)("inlineCode",{parentName:"p"},"selfie"),". When committed, the picture is sent to an Azure cognitive function to extract the gender, male and smile (a measure of emotion). The app then displays the taken picture and returned result in the app. It also sends the result to PowerBI real-time stream to allow the visualization of the evaluation results."),Object(r.b)("p",null,"So in essence, a user uses the app to take a selfie with a smile or a frown to indicate whether the presentation was good, not so good or somewhere in between. For example, if the user submitted a picture that looks like this:"),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://i.imgur.com/QPF0LI8.png",alt:"Evaluation"}))),Object(r.b)("p",null,"The cognitive result might look like this:"),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://i.imgur.com/0U4IaRH.png",alt:"Cognitive Result"}))),Object(r.b)("p",null,"and the result will be pushed in real-time to a PowerBI dashboard:"),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://i.imgur.com/XvnGaVs.png",alt:"PowerBI"}))),Object(r.b)("h2",{id:"xamarin-app"},"Xamarin App"),Object(r.b)("h3",{id:"taking-a-camera-picture"},"Taking a Camera picture"),Object(r.b)("p",null,"Using VS for mac, I created a blank XAML forms app solution with Android and iOS. Added the following Xamarin plugin to all of its projects (portable, iOS and Droid):"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Xam.Plugin.Media")),Object(r.b)("p",null,"This allows me to use the Camera without having to deal with iOs or Android. I wrote the following simple XAML in the main page:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'<?xml version="1.0" encoding="utf-8"?>\n<ContentPage xmlns="http://xamarin.com/schemas/2014/forms" \n        xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" \n        xmlns:local="clr-namespace:PresentationEvaluation" \n        x:Class="PresentationEvaluation.PresentationEvaluationPage">\n    <StackLayout>\n        <Button x:Name="btnTakePicture" Clicked="btnTakePicture_Clicked" Text="Take selfie with emotion"/>\n        <ActivityIndicator x:Name="Indicator" Color="Black"/>\n        <StackLayout x:Name="ResultPanel" Padding="10">\n            <Image x:Name="Image" HeightRequest="240" />\n            <StackLayout x:Name="Age" Orientation="Horizontal">\n                <Label>Age</Label>\n                <Label x:Name="AgeData"></Label>\n            </StackLayout>\n            <StackLayout x:Name="Gender" Orientation="Horizontal">\n                <Label>Gender</Label>\n                <Label x:Name="GenderData"></Label>\n            </StackLayout>\n            <StackLayout x:Name="Smile" Orientation="Horizontal">\n                <Label>Smile</Label>\n                <Label x:Name="SmileData"></Label>\n            </StackLayout>\n            <Label x:Name="Result"></Label>\n        </StackLayout>\n    </StackLayout>\n</ContentPage>\n')),Object(r.b)("p",null,"and I had this in the behind code:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),'namespace PresentationEvaluation\n{\n    public partial class PresentationEvaluationPage : ContentPage\n    {\n        public PresentationEvaluationPage()\n        {\n            InitializeComponent();\n            ResultPanel.IsVisible = false;\n        }\n\n        private async void btnTakePicture_Clicked(object sender, EventArgs e)\n        {\n            try\n            {\n                await CrossMedia.Current.Initialize();\n\n                if (!CrossMedia.Current.IsCameraAvailable || !CrossMedia.Current.IsTakeVideoSupported)\n                    throw new Exception($"There is no camera on the device!");\n\n                var file = await CrossMedia.Current.TakePhotoAsync(new Plugin.Media.Abstractions.StoreCameraMediaOptions\n                {\n                    SaveToAlbum = true,\n                    Name = "SelfieEvaluation.jpg"\n                });\n\n                if (file == null)\n                    throw new Exception($"Picture not captured to disk!!");\n\n                Image.Source = ImageSource.FromStream(() => file.GetStream());\n\n                //TODO: Do something with the image \n            }\n            catch (Exception ex)\n            {\n                await DisplayAlert("Sorry", "An error occurred: " + ex.Message, "Ok");\n            }\n            finally\n            {\n            }\n        }\n    }\n}\n')),Object(r.b)("h3",{id:"communicating-with-cognitive"},"Communicating with Cognitive"),Object(r.b)("p",null,"Now that we got the picture from the Camera, I wanted to send it to Azure Cognitive to detect the age, gender and smile. I added some NuGet packages:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Microsoft.Net.Http"),Object(r.b)("li",{parentName:"ul"},"Newton.Json")),Object(r.b)("p",null,"First I had to convert the media image file to an array of bytes:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"public static byte[] GetBytes(MediaFile file)\n{\n    byte[] fileBytes = null;\n    using (var ms = new MemoryStream())\n    {\n        file.GetStream().CopyTo(ms);\n        file.Dispose();\n        fileBytes = ms.ToArray();\n    }\n\n    return fileBytes;\n}\n")),Object(r.b)("p",null,"Then submitted to the congnitive APIs:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),'        byte[] picture = GetBytes(file);\n\n        float age = -1;\n        string gender = "";\n        float smile = -1;\n\n        // Submit to Cognitive\n        using (var httpClient = new HttpClient())\n        {\n            httpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", "get-your-own");\n            HttpResponseMessage response;\n            var content = new ByteArrayContent(picture);\n            content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");\n            response = await httpClient.PostAsync(FacialApi, content);\n            string responseData = await response.Content.ReadAsStringAsync();\n            if (!response.IsSuccessStatusCode)\n                throw new Exception($"Unable to post to cognitive service: {response.StatusCode.ToString()}");\n\n            Face[] faces = JsonConvert.DeserializeObject<Face[]>(responseData);\n            if (faces != null && faces.Length > 0)\n            {\n                Face face = faces[0];\n                age = face.faceAttributes.age;\n                gender = face.faceAttributes.gender;\n                smile = face.faceAttributes.smile;\n            }\n        }\n')),Object(r.b)("p",null,"Where the Face classes are defined as follows (I just special pasted the docs JSON example into my Visual Studio to create these classes):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"public class Face\n{\n    public string faceId { get; set; }\n    public Facerectangle faceRectangle { get; set; }\n    public Faceattributes faceAttributes { get; set; }\n    public string glasses { get; set; }\n    public Headpose headPose { get; set; }\n}\n\npublic class Facerectangle\n{\n    public int width { get; set; }\n    public int height { get; set; }\n    public int left { get; set; }\n    public int top { get; set; }\n}\n\npublic class Faceattributes\n{\n    public float age { get; set; }\n    public string gender { get; set; }\n    public float smile { get; set; }\n    public Facialhair facialHair { get; set; }\n}\n\npublic class Facialhair\n{\n    public float mustache { get; set; }\n    public float beard { get; set; }\n    public float sideburns { get; set; }\n}\n\npublic class Headpose\n{\n    public float roll { get; set; }\n    public int yaw { get; set; }\n    public int pitch { get; set; }\n}\n")),Object(r.b)("p",null,"Because I have a free cognitive account and I could be throttled, I created a randomizer to generate random values in case i don't wato to use the cognitive functions for testing. So I created a flag that I can change whenever I want to test without cognitive:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"// Submit to Cognitive\nif (IsCognitive)\n{\n    ///same as above\n    ...\n}\nelse\n{\n    gender = genders.ElementAt(random.Next(genders.Count - 1));\n    age = ages.ElementAt(random.Next(ages.Count - 1));\n    smile = smiles.ElementAt(random.Next(smiles.Count - 1));\n}\n")),Object(r.b)("h3",{id:"powerbi"},"PowerBI"),Object(r.b)("p",null,"Once I get the result back from the cognitive function, I create a real time event (and refer to the smile range as score after I multiply it by 10) and send it to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://powerbi.microsoft.com/en-us/documentation/powerbi-service-real-time-streaming/"}),"PowerBI real-time")," very useful feature which displays visualizations in real-time:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),'using (var httpClient = new HttpClient())\n{\n    var realTimeEvent = new\n    {\n        time = DateTime.Now,\n        age = (int)age,\n        score = (int)(smile * 10),\n        gender = gender\n    };\n\n    var data = new dynamic[1];\n    data[0] = realTimeEvent;\n    var postData = JsonConvert.SerializeObject(data);\n    HttpContent httpContent = new StringContent(postData, Encoding.UTF8, "application/json");\n    HttpResponseMessage response = await httpClient.PostAsync(PowerBIApi, httpContent);\n    string responseString = await response.Content.ReadAsStringAsync();\n\n    if (!response.IsSuccessStatusCode)\n        throw new Exception("Unable to post to PowerBI: " + response.StatusCode);\n}\n')),Object(r.b)("p",null,"where PowerBIApi is the real-time API that you must post it. You will get this from PowerPI service when you create your own Real-Time dataset."),Object(r.b)("p",null,"This allows people to watch the presentation evaluation result in real-time:"),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"http://i.imgur.com/XvnGaVs.png",alt:"PowerBI"}))),Object(r.b)("p",null,"That was a nice exercise! I liked the ease of developing stuff in Xamarin forms as it shields me almost completely from Android and iOS. Visual Studio for mac (in preview), however, has a lot of room of improvement...it feels heavy, clunky and a bit buggy. Finally I would like to say that, in non-demo situations, it is probably better to send the picture to an Azure storage which will trigger an Azure Function that will send to cognitive and PowerBI. "),Object(r.b)("p",null,"The code is available in GitHub ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/khaledhikmat/presentation-evaluation"}),"here")))}u.isMDXComponent=!0}}]);